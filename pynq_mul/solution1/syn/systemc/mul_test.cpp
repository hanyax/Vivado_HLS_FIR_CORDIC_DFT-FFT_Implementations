// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mul_test.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mul_test::ap_const_logic_1 = sc_dt::Log_1;
const int mul_test::C_S_AXI_DATA_WIDTH = "100000";
const sc_logic mul_test::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> mul_test::ap_const_lv32_1 = "1";
const bool mul_test::ap_const_boolean_1 = true;

mul_test::mul_test(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mul_test_mul_io_s_axi_U = new mul_test_mul_io_s_axi<C_S_AXI_MUL_IO_ADDR_WIDTH,C_S_AXI_MUL_IO_DATA_WIDTH>("mul_test_mul_io_s_axi_U");
    mul_test_mul_io_s_axi_U->AWVALID(s_axi_mul_io_AWVALID);
    mul_test_mul_io_s_axi_U->AWREADY(s_axi_mul_io_AWREADY);
    mul_test_mul_io_s_axi_U->AWADDR(s_axi_mul_io_AWADDR);
    mul_test_mul_io_s_axi_U->WVALID(s_axi_mul_io_WVALID);
    mul_test_mul_io_s_axi_U->WREADY(s_axi_mul_io_WREADY);
    mul_test_mul_io_s_axi_U->WDATA(s_axi_mul_io_WDATA);
    mul_test_mul_io_s_axi_U->WSTRB(s_axi_mul_io_WSTRB);
    mul_test_mul_io_s_axi_U->ARVALID(s_axi_mul_io_ARVALID);
    mul_test_mul_io_s_axi_U->ARREADY(s_axi_mul_io_ARREADY);
    mul_test_mul_io_s_axi_U->ARADDR(s_axi_mul_io_ARADDR);
    mul_test_mul_io_s_axi_U->RVALID(s_axi_mul_io_RVALID);
    mul_test_mul_io_s_axi_U->RREADY(s_axi_mul_io_RREADY);
    mul_test_mul_io_s_axi_U->RDATA(s_axi_mul_io_RDATA);
    mul_test_mul_io_s_axi_U->RRESP(s_axi_mul_io_RRESP);
    mul_test_mul_io_s_axi_U->BVALID(s_axi_mul_io_BVALID);
    mul_test_mul_io_s_axi_U->BREADY(s_axi_mul_io_BREADY);
    mul_test_mul_io_s_axi_U->BRESP(s_axi_mul_io_BRESP);
    mul_test_mul_io_s_axi_U->ACLK(ap_clk);
    mul_test_mul_io_s_axi_U->ARESET(ap_rst_n_inv);
    mul_test_mul_io_s_axi_U->ACLK_EN(ap_var_for_const0);
    mul_test_mul_io_s_axi_U->ap_start(ap_start);
    mul_test_mul_io_s_axi_U->interrupt(interrupt);
    mul_test_mul_io_s_axi_U->ap_ready(ap_ready);
    mul_test_mul_io_s_axi_U->ap_done(ap_done);
    mul_test_mul_io_s_axi_U->ap_idle(ap_idle);
    mul_test_mul_io_s_axi_U->out_r(out_r);
    mul_test_mul_io_s_axi_U->out_r_ap_vld(out_r_ap_vld);
    mul_test_mul_io_s_axi_U->in_r(in_r);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_out_r);
    sensitive << ( ap_start );
    sensitive << ( in_r );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mul_test_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_mul_io_AWVALID, "(port)s_axi_mul_io_AWVALID");
    sc_trace(mVcdFile, s_axi_mul_io_AWREADY, "(port)s_axi_mul_io_AWREADY");
    sc_trace(mVcdFile, s_axi_mul_io_AWADDR, "(port)s_axi_mul_io_AWADDR");
    sc_trace(mVcdFile, s_axi_mul_io_WVALID, "(port)s_axi_mul_io_WVALID");
    sc_trace(mVcdFile, s_axi_mul_io_WREADY, "(port)s_axi_mul_io_WREADY");
    sc_trace(mVcdFile, s_axi_mul_io_WDATA, "(port)s_axi_mul_io_WDATA");
    sc_trace(mVcdFile, s_axi_mul_io_WSTRB, "(port)s_axi_mul_io_WSTRB");
    sc_trace(mVcdFile, s_axi_mul_io_ARVALID, "(port)s_axi_mul_io_ARVALID");
    sc_trace(mVcdFile, s_axi_mul_io_ARREADY, "(port)s_axi_mul_io_ARREADY");
    sc_trace(mVcdFile, s_axi_mul_io_ARADDR, "(port)s_axi_mul_io_ARADDR");
    sc_trace(mVcdFile, s_axi_mul_io_RVALID, "(port)s_axi_mul_io_RVALID");
    sc_trace(mVcdFile, s_axi_mul_io_RREADY, "(port)s_axi_mul_io_RREADY");
    sc_trace(mVcdFile, s_axi_mul_io_RDATA, "(port)s_axi_mul_io_RDATA");
    sc_trace(mVcdFile, s_axi_mul_io_RRESP, "(port)s_axi_mul_io_RRESP");
    sc_trace(mVcdFile, s_axi_mul_io_BVALID, "(port)s_axi_mul_io_BVALID");
    sc_trace(mVcdFile, s_axi_mul_io_BREADY, "(port)s_axi_mul_io_BREADY");
    sc_trace(mVcdFile, s_axi_mul_io_BRESP, "(port)s_axi_mul_io_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, out_r, "out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "out_r_ap_vld");
    sc_trace(mVcdFile, in_r, "in_r");
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
#endif

    }
    mHdltvinHandle.open("mul_test.hdltvin.dat");
    mHdltvoutHandle.open("mul_test.hdltvout.dat");
}

mul_test::~mul_test() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mul_test_mul_io_s_axi_U;
}

void mul_test::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mul_test::thread_ap_done() {
    ap_done = ap_start.read();
}

void mul_test::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void mul_test::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void mul_test::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mul_test::thread_out_r() {
    out_r = (!ap_const_lv32_1.is_01())? sc_lv<32>(): in_r.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void mul_test::thread_out_r_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void mul_test::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_mul_io_AWVALID\" :  \"" << s_axi_mul_io_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_mul_io_AWREADY\" :  \"" << s_axi_mul_io_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_mul_io_AWADDR\" :  \"" << s_axi_mul_io_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_mul_io_WVALID\" :  \"" << s_axi_mul_io_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_mul_io_WREADY\" :  \"" << s_axi_mul_io_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_mul_io_WDATA\" :  \"" << s_axi_mul_io_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_mul_io_WSTRB\" :  \"" << s_axi_mul_io_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_mul_io_ARVALID\" :  \"" << s_axi_mul_io_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_mul_io_ARREADY\" :  \"" << s_axi_mul_io_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_mul_io_ARADDR\" :  \"" << s_axi_mul_io_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_mul_io_RVALID\" :  \"" << s_axi_mul_io_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_mul_io_RREADY\" :  \"" << s_axi_mul_io_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_mul_io_RDATA\" :  \"" << s_axi_mul_io_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_mul_io_RRESP\" :  \"" << s_axi_mul_io_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_mul_io_BVALID\" :  \"" << s_axi_mul_io_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_mul_io_BREADY\" :  \"" << s_axi_mul_io_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_mul_io_BRESP\" :  \"" << s_axi_mul_io_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

